package MoutainWalking;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Solution {
	static int visited[][], a[][], n, u, v;

	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		System.setIn(new FileInputStream("input.txt"));
		Scanner sc = new Scanner(System.in);
		int test = sc.nextInt();
		for (int tc = 1; tc <= test; tc++) {
			n = sc.nextInt();
			a = new int[n + 5][n + 5];
			visited = new int[n + 5][n + 5];
			for (int i = 1; i <= n; i++) {
				for (int j = 1; j <= n; j++) {
					a[i][j] = sc.nextInt();
				}
			}
			u = 0;
			v = 111;
			while (v - u > 1) {
				int r = (u + v) / 2;
				if (find_path(r))
					v = r;
				else
					u = r;
			}
			if (find_path(u))
				System.out.println("#" + tc + " " + u);
			else
				System.out.println("#" + tc + " " + v);
		}
	}

	private static boolean find_path(int x) {
		// TODO Auto-generated method stub
		int fl = 0;
		for (int i = 0; i <= 110 - x; i++) {
			for (int j = 1; j <= n; j++)
				for (int k = 1; k <= n; k++)
					visited[j][k] = 0;
			visited[1][1] = 1;
			duyet(1, 1, i, i + x);
			if (visited[n][n] == 1) {
				fl = 1;
				break;
			}
		}
		if (fl == 1)
			return true;
		return false;
	}

	private static void duyet(int x, int y, int min, int max) {
		// TODO Auto-generated method stub
		if(a[x][y]>=min && a[x][y]<=max)
	    {
	        visited[x][y]=1;
	        if(x == n && y==n);
	        else
	        {
	            if(isSafe(x+1,y)) duyet(x+1,y,min,max);
	            if(isSafe(x-1,y)) duyet(x-1,y,min,max);
	            if(isSafe(x,y+1)) duyet(x,y+1,min,max);
	            if(isSafe(x,y-1)) duyet(x,y-1,min,max);
	        }
	    }
	}
	public static boolean isSafe(int a,int b)
	{
	     if(a>=1 && a<=n && b>=1 && b<=n && visited[a][b]==0)
	         return true;
	     return false;
	}
}
