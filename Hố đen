package HoDen;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Solution {
	static int soHoDen;// Số hố đen
	static int n;// chiều dài của mang
	static int[][] mang, khoangcach;
	static int[] visited;
	static int res;
	static int x_End, y_End;

	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		System.setIn(new FileInputStream("input.txt"));
		Scanner sc = new Scanner(System.in);
		int sbt = sc.nextInt();
		for (int tc = 1; tc <= sbt; tc++) {
			soHoDen = sc.nextInt();
			// ta coi điểm đầu và điểm cuối cũng là hố đen => +2
			// mỗi hố đen có thể vào ra bằng 2 đầu => mỗi hố đen ta coi nó thành 2 hố đen
			// với điểm đầu điểm cuối đảo cho nhau và thời gian qua hố đen vấn là 1
			n = 2 + soHoDen * 2;
			// mỗi hàng 5 ô: ô 1,2: toạ độ x,y của điểm đầu hố đen;
			// ô 3,4: toạ độ x,y của điểm cuối hố đen;
			// ô 5: thời gian qua mỗi hố đen
			mang = new int[n][5];
			khoangcach = new int[n][n]; // khoang cach giua các hố đen
			visited = new int[n]; // dùng cho back track
			// điểm đầu
			mang[0][0] = mang[0][2] = sc.nextInt();
			mang[0][1] = mang[0][3] = sc.nextInt();
			mang[0][4] = 0;// thời gian qua chính nó là 0
			// điểm cuối
			x_End =mang[1][0] = mang[1][2] = sc.nextInt();
			y_End =mang[1][1] = mang[1][3] = sc.nextInt();
			mang[1][4] = 0;// thời gian qua chính nó là 0
			for (int i = 2; i < n; i = i + 2) {
				int tmp0 = sc.nextInt();
				int tmp1 = sc.nextInt();
				int tmp2 = sc.nextInt();
				int tmp3 = sc.nextInt();
				int tmp4 = sc.nextInt();
				// đi từ A -> B
				mang[i][0] = tmp0;
				mang[i][1] = tmp1;
				mang[i][2] = tmp2;
				mang[i][3] = tmp3;
				mang[i][4] = tmp4;
				// đi từ B->A
				mang[i + 1][0] = tmp2;
				mang[i + 1][1] = tmp3;
				mang[i + 1][2] = tmp0;
				mang[i + 1][3] = tmp1;
				mang[i + 1][4] = tmp4;
			}

			// tìm mảng khoảng cách: độ dài của từ từng hố đen đến các hố đen khác
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (i == j) {// i==j tức là hố đen đến chính nó
						khoangcach[i][j] = 0;
					} else {
						int tmp = tinhdodai(i, j);
						khoangcach[i][j] = tmp;
					}
				}
			}
//			System.out.println("Mang: ");
//			for (int i = 0; i < n; i++) {
//				for (int j = 0; j < 5; j++) {
//					System.out.print(mang[i][j] + " ");
//				}
//				System.out.println();
//			}
//			System.out.println("Mang khoang cách: ");
//			for (int i = 0; i < n; i++) {
//				for (int j = 0; j < n; j++) {
//					System.out.print(khoangcach[i][j] + " ");
//				}
//				System.out.println();
//			}
			res = 999999;
			backtrack(0, 0);
			System.out.println("#" + tc + " " + res);
		}

	}

	private static void backtrack(int x, int count) {
		// TODO Auto-generated method stub
		visited[x] = 1;
		if (mang[x][0] == x_End && mang[x][1] == y_End) {//
			if (res > count)
				res = count;
			return;
		}
		for (int i = 0; i < n; i++) {
			if (visited[i] == 0) {
				visited[i] = 1;
				count += khoangcach[x][i];
				backtrack(i, count);
				visited[i] = 0;
				count -= khoangcach[x][i];
			}
		}

	}

	private static int tinhdodai(int x, int y) {
		// TODO Auto-generated method stub
		// Tính khoảng cách giữa 2 hố đen x và y
		// ta coi như là đi qua hố đen x rồi thì điểm xuất phát là sẽ điểm khi đi qua
		// của hố đen x(B): toạ độ (mang[x][2],mang[x][2])
		// điểm đến sẽ là điểm bắt(A) của hố đen y toạ độ (mang[y][0],mang[y][1])
		// công thức thôi: (tung(x) - tung(y)) +(hoàng(x) - hoang(y))
		int tmp = Math.abs(mang[x][2] - mang[y][0]) + Math.abs(mang[x][3] - mang[y][1]);
		// do mk coi như đi qua hố đen x rồi nên kết quả cần cộng thêm thời gian đi qua
		// hố đen x: ở đây nó ở cột 4 của mang
		int tmp1 = tmp + mang[x][4];
		return tmp1;
	}

}
//input
//3
//0
//0 0 60 60
//1
//0 0 2 0
//1 0 1 2 0
//1
//0 0 60 60
//20 20 40 40 10
//output
//#1 120
//#2 2
//#3 90

